import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Updater,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackContext,
    ApplicationBuilder
)

from model_predict import load_and_preprocess_data, predict_sales

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def start(update: Update, context: CallbackContext) -> None:
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π"""
    user = update.effective_user
    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n"
        "–Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥–∞–∂.\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–ª—É–¥—É—é—â–∏–µ 7 –¥–Ω–µ–π!"
    )
    reply_keyboard = [["–°–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑"]]
    await update.message.reply_text(
        welcome_text,
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True)
    )

async def make_prediction(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏"""
    await update.message.reply_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –∏ –¥–µ–ª–∞—é –ø—Ä–æ–≥–Ω–æ–∑...")

    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        df, next_date = load_and_preprocess_data()
        df_predict = df[df['–î–∞—Ç–∞'] == next_date]
        result = predict_sales(df_predict)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞
        output = "üìä –ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–∞–∂ –Ω–∞ 7 –¥–Ω–µ–π –≤–ø–µ—Ä—ë–¥:\n"
        for _, row in result.iterrows():
            output += f"–¢–æ–≤–∞—Ä: {row['–¢–æ–≤–∞—Ä']} | –ü—Ä–æ–≥–Ω–æ–∑: {row['–ü—Ä–æ–≥–Ω–æ–∑']} —à—Ç.\n"

        await update.message.reply_text(output)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –ù–æ–≤—ã–π —Å–ø–æ—Å–æ–± –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (–¥–ª—è PTB v20.x+)
    application = ApplicationBuilder().token("7450398355:AAFWD1hOF9kDBdhhkrmyhlLl9uD5-2SASI4").build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex("^–°–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑$"), make_prediction))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()